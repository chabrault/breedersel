enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
pak::pak("golem")
run_app()
golem::with_golem_options()
source("~/work/grapesel/R/app_server.R", echo=TRUE)
source("~/work/grapesel/R/app_ui.R", echo=TRUE)
app_ui <- function(request) {
tagList(
# Leave this function for adding external resources
golem_add_external_resources(),
bs4DashPage(skin="light",# = "purple",
fullscreen = TRUE,
header=dashboardHeader(title="Grape selector",
controlbarIcon=shiny::icon("circle", verify_fa = FALSE)),
# ----------- SIDEBAR ------------- #
sidebar=bs4DashSidebar(
collasped=FALSE,
expandOnHover=TRUE,
fixed=TRUE,
# bs4SidebarHeader("Menu"),
bs4SidebarMenu(
bs4SidebarMenuItem("Data loading",
tabName="TabUpload",icon=icon("upload")),
bs4SidebarMenuItem("Table of data",
tabName = "TabSumm",icon=icon("table-columns")),
bs4SidebarMenuItem("Data filtering",
tabName = "Tabdata",icon=icon("sliders")),
bs4SidebarMenuItem("MGIDI",
tabName = "TabplotMGIDI",icon=icon("plus-minus")),
bs4SidebarMenuItem("Magic graph",
tabName = "TabplotEsquisse",icon=icon("wand-magic-sparkles")),
bs4SidebarMenuItem("About",
tabName = "Apropos",icon=icon("circle-info")
)
)
), #bs4DashSidebar
# ----------- BODY ------------- #
## Menu load data
body=bs4Dash::bs4DashBody(
bs4TabItems(
bs4TabItem(tabName = "TabUpload",
shiny::fluidPage(
mod_import_table_ui("import_table_1")
)
),
## Table of data summary
bs4TabItem(tabName = "TabSumm",
shiny::fluidPage(
h2("Data table"),
#shiny::uiOutput("output_data")
reactable::reactableOutput("output_data")
)
),
## Tab for filtering data
bs4TabItem(tabName = "Tabdata",
shiny::fluidPage(
# shiny::column(width=5,
#               shiny::actionButton("valid_upVars","Modifier les colonnes")),
#
# shiny::column(width=12,
#               datamods::update_variables_ui(id="update_data",title=TRUE),
# ),
shiny::column(width=5,
shinyWidgets::actionBttn("valid_filtVars","Filtering?",
style = "pill",
color = "danger")),
br(),
shiny::column(width=12,
mod_data_filtering_ui("filt_data")
)
)
),
bs4TabItem(tabName="TabplotMGIDI",
fluidRow(
shiny::column(width=12,
h2("Creation of a multivariate selection index"),
#shiny::actionButton("valid_plotPoint2",label="Lancer le graph"),
mod_MGIDI_ui("mgidi_1")
)
)
),
bs4TabItem(tabName="TabplotEsquisse",
fluidPage(
h2("Custom plot"),
column(6,
shinyWidgets::actionBttn("launch_esquisse",
label="Launch esquisse app",
style = "pill",
color = "danger"))
),
column(12,
esquisse::esquisse_ui(id="esquisse",
header = FALSE, # dont display gadget title
container = esquisse::esquisseContainer(height = "700px",
fixed=FALSE))
)
),
bs4TabItem(tabName="Apropos",
fluidPage(
h2("Grape Selector application"),
column(12,
h5("Author: Charlotte Brault"),
a(actionButton(inputId = "email1", label = "Send email",
class = "btn-info",
icon = icon("envelope", lib = "font-awesome")),
href="mailto:charlotte.brault@live.com"),
br(),
h5("Project: Vitis Explorer"),
br(),
h5("Version of the application:"),textOutput("pkgVersion"),
br(),
bs4Dash::bs4Card(
collapsed = TRUE,
title = div(icon("jsfiddle"), "Rsession"), width = 12,
verbatimTextOutput("Rsession"),
br()
),
fluidRow(
column(4,tags$img(src='logo/FranceAgriMer-logo.png', height="120px")),
column(4,tags$img(src='logo/Logo-MAA-CASDAR.png', height="100px")),
column(4,tags$img(src='logo/cniv-logo.jpeg', height="100px")),
column(12,br()),
column(5,tags$img(src='logo/INRAE_color.png', height="100px"), offset=1),
column(5,tags$img(src='logo/IFV_nom.png', height="150px"))
)
)
)
) # bs4TabItem A propos
) # tabItems
) # dashboard body
) # dashboardpage
)
}
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
shiny::runApp()
run_app()
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
golem::with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
source("~/work/grapesel/R/run_app.R", echo=TRUE)
run_app()
??addResourcePath
run_app()
run_app()
run_app()
source("~/work/grapesel/R/app_ui.R", echo=TRUE)
source("~/work/grapesel/R/app_server.R", echo=TRUE)
run_app()
??app_sys
?add_resource_path
pkgdown:::build_site()
devtools::check()
run_app()
remotes::install_github("thinkr-open/golem", ref = "dev")
remotes::install_github("thinkr-open/golem", ref = "dev")
run_app()
run_app()
shiny::runApp()
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
golem::with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
?shinyApp
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
golem::with_golem_options(
app = shiny::shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
source("~/work/grapesel/R/app_config.R", echo=TRUE)
run_app()
# Building a Prod-Ready, Robust Shiny Application.
#
# README: each step of the dev files is optional, and you don't have to
# fill every dev scripts before getting started.
# 01_start.R should be filled at start.
# 02_dev.R should be used to keep track of your development during the project.
# 03_deploy.R should be used once you need to deploy your app.
#
#
######################################
#### CURRENT FILE: DEPLOY SCRIPT #####
######################################
# Test your app
## Run checks ----
## Check the package before sending to prod
devtools::check()
rhub::check_for_cran()
# Deploy
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
## Docker ----
## If you want to deploy via a generic Dockerfile
golem::add_dockerfile_with_renv()
yes
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
help("esquisse-deprecated")
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
golem::with_golem_options(
app = shiny::shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
source("~/work/grapesel/R/app_server.R", echo = TRUE)
# Run the application
run_app()
source("~/work/grapesel/R/app_ui.R", echo = TRUE)
# Run the application
run_app()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
source("~/work/grapesel/R/mod_import_table.R", echo = TRUE)
source("~/work/grapesel/R/app_server.R", echo = TRUE)
# Building a Prod-Ready, Robust Shiny Application.
#
# README: each step of the dev files is optional, and you don't have to
# fill every dev scripts before getting started.
# 01_start.R should be filled at start.
# 02_dev.R should be used to keep track of your development during the project.
# 03_deploy.R should be used once you need to deploy your app.
#
#
######################################
#### CURRENT FILE: DEPLOY SCRIPT #####
######################################
# Test your app
## Run checks ----
## Check the package before sending to prod
devtools::check()
rhub::check_for_cran()
# Deploy
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
## Docker ----
## If you want to deploy via a generic Dockerfile
golem::add_dockerfile_with_renv()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_with_renv_shinyproxy()
## Posit ----
## If you want to deploy on Posit related platforms
golem::add_positconnect_file()
golem::add_shinyappsio_file()
golem::add_shinyserver_file()
## Deploy to Posit Connect or ShinyApps.io ----
## Add/update manifest file (optional; for Git backed deployment on Posit )
rsconnect::writeManifest()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
grapesel::run_app() # add parameters here (if any)
